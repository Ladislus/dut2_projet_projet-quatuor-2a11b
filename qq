GIT-LOG(1)                                            Git Manual                                           GIT-LOG(1)

NNAAMMEE
       git-log - Show commit logs

SSYYNNOOPPSSIISS
       _g_i_t _l_o_g [<options>] [<revision range>] [[--] <path>...]

DDEESSCCRRIIPPTTIIOONN
       Shows the commit logs.

       The command takes options applicable to the ggiitt rreevv--lliisstt command to control what is shown and how, and options
       applicable to the ggiitt ddiiffff--** commands to control how the changes each commit introduces are shown.

OOPPTTIIOONNSS
       --follow
           Continue listing the history of a file beyond renames (works only for a single file).

       --no-decorate, --decorate[=short|full|auto|no]
           Print out the ref names of any commits that are shown. If _s_h_o_r_t is specified, the ref name prefixes
           _r_e_f_s_/_h_e_a_d_s_/, _r_e_f_s_/_t_a_g_s_/ and _r_e_f_s_/_r_e_m_o_t_e_s_/ will not be printed. If _f_u_l_l is specified, the full ref name
           (including prefix) will be printed. If _a_u_t_o is specified, then if the output is going to a terminal, the
           ref names are shown as if _s_h_o_r_t were given, otherwise no ref names are shown. The default option is _s_h_o_r_t.

       --decorate-refs=<pattern>, --decorate-refs-exclude=<pattern>
           If no ----ddeeccoorraattee--rreeffss is given, pretend as if all refs were included. For each candidate, do not use it
           for decoration if it matches any patterns given to ----ddeeccoorraattee--rreeffss--eexxcclluuddee or if it doesn’t match any of
           the patterns given to ----ddeeccoorraattee--rreeffss.

       --source
           Print out the ref name given on the command line by which each commit was reached.

       --use-mailmap
           Use mailmap file to map author and committer names and email addresses to canonical real names and email
           addresses. See ggiitt--sshhoorrttlloogg(1).

       --full-diff
           Without this flag, ggiitt lloogg --pp <<ppaatthh>>......  shows commits that touch the specified paths, and diffs about the
           same specified paths. With this, the full diff is shown for commits that touch the specified paths; this
           means that "<path>..." limits only commits, and doesn’t limit diff for those commits.

           Note that this affects all diff-based output types, e.g. those produced by ----ssttaatt, etc.

       --log-size
           Include a line “log size <number>” in the output for each commit, where <number> is the length of that
           commit’s message in bytes. Intended to speed up tools that read log messages from ggiitt lloogg output by
           allowing them to allocate space in advance.

       -L <start>,<end>:<file>, -L :<funcname>:<file>
           Trace the evolution of the line range given by "<start>,<end>" (or the function name regex <funcname>)
           within the <file>. You may not give any pathspec limiters. This is currently limited to a walk starting
           from a single revision, i.e., you may only give zero or one positive revision arguments. You can specify
           this option more than once.

           <start> and <end> can take one of these forms:

           ·   number

               If <start> or <end> is a number, it specifies an absolute line number (lines count from 1).

           ·   /regex/

               This form will use the first line matching the given POSIX regex. If <start> is a regex, it will
               search from the end of the previous --LL range, if any, otherwise from the start of file. If <start> is
               “^/regex/”, it will search from the start of file. If <end> is a regex, it will search starting at the
               line given by <start>.

           ·   +offset or -offset

               This is only valid for <end> and will specify a number of lines before or after the line given by
               <start>.

           If “:<funcname>” is given in place of <start> and <end>, it is a regular expression that denotes the range
           from the first funcname line that matches <funcname>, up to the next funcname line. “:<funcname>” searches
           from the end of the previous --LL range, if any, otherwise from the start of file. “^:<funcname>” searches
           from the start of file.

       <revision range>
           Show only commits in the specified revision range. When no <revision range> is specified, it defaults to
           HHEEAADD (i.e. the whole history leading to the current commit).  oorriiggiinn....HHEEAADD specifies all the commits
           reachable from the current commit (i.e.  HHEEAADD), but not from oorriiggiinn. For a complete list of ways to spell
           <revision range>, see the _S_p_e_c_i_f_y_i_n_g _R_a_n_g_e_s section of ggiittrreevviissiioonnss(7).

       [--] <path>...
           Show only commits that are enough to explain how the files that match the specified paths came to be. See
           _H_i_s_t_o_r_y _S_i_m_p_l_i_f_i_c_a_t_i_o_n below for details and other simplification modes.

           Paths may need to be prefixed with ‘`-- '’ to separate them from options or the revision range, when
           confusion arises.

   CCoommmmiitt LLiimmiittiinngg
       Besides specifying a range of commits that should be listed using the special notations explained in the
       description, additional commit limiting may be applied.

       Using more options generally further limits the output (e.g. ----ssiinnccee==<<ddaattee11>> limits to commits newer than
       <<ddaattee11>>, and using it with ----ggrreepp==<<ppaatttteerrnn>> further limits to commits whose log message has a line that
       matches <<ppaatttteerrnn>>), unless otherwise noted.

       Note that these are applied before commit ordering and formatting options, such as ----rreevveerrssee.

       -<number>, -n <number>, --max-count=<number>
           Limit the number of commits to output.

       --skip=<number>
           Skip _n_u_m_b_e_r commits before starting to show the commit output.

       --since=<date>, --after=<date>
           Show commits more recent than a specific date.

       --until=<date>, --before=<date>
           Show commits older than a specific date.

       --author=<pattern>, --committer=<pattern>
           Limit the commits output to ones with author/committer header lines that match the specified pattern
           (regular expression). With more than one ----aauutthhoorr==<<ppaatttteerrnn>>, commits whose author matches any of the given
           patterns are chosen (similarly for multiple ----ccoommmmiitttteerr==<<ppaatttteerrnn>>).

       --grep-reflog=<pattern>
           Limit the commits output to ones with reflog entries that match the specified pattern (regular
           expression). With more than one ----ggrreepp--rreefflloogg, commits whose reflog message matches any of the given
           patterns are chosen. It is an error to use this option unless ----wwaallkk--rreeffllooggss is in use.

       --grep=<pattern>
           Limit the commits output to ones with log message that matches the specified pattern (regular expression).
           With more than one ----ggrreepp==<<ppaatttteerrnn>>, commits whose message matches any of the given patterns are chosen
           (but see ----aallll--mmaattcchh).

           When ----sshhooww--nnootteess is in effect, the message from the notes is matched as if it were part of the log
           message.

       --all-match
           Limit the commits output to ones that match all given ----ggrreepp, instead of ones that match at least one.

       --invert-grep
           Limit the commits output to ones with log message that do not match the pattern specified with
           ----ggrreepp==<<ppaatttteerrnn>>.

       -i, --regexp-ignore-case
           Match the regular expression limiting patterns without regard to letter case.

       --basic-regexp
           Consider the limiting patterns to be basic regular expressions; this is the default.

       -E, --extended-regexp
           Consider the limiting patterns to be extended regular expressions instead of the default basic regular
           expressions.

       -F, --fixed-strings
           Consider the limiting patterns to be fixed strings (don’t interpret pattern as a regular expression).

       -P, --perl-regexp
           Consider the limiting patterns to be Perl-compatible regular expressions.

           Support for these types of regular expressions is an optional compile-time dependency. If Git wasn’t
           compiled with support for them providing this option will cause it to die.

       --remove-empty
           Stop when a given path disappears from the tree.

       --merges
           Print only merge commits. This is exactly the same as ----mmiinn--ppaarreennttss==22.

       --no-merges
           Do not print commits with more than one parent. This is exactly the same as ----mmaaxx--ppaarreennttss==11.

       --min-parents=<number>, --max-parents=<number>, --no-min-parents, --no-max-parents
           Show only commits which have at least (or at most) that many parent commits. In particular,
           ----mmaaxx--ppaarreennttss==11 is the same as ----nnoo--mmeerrggeess, ----mmiinn--ppaarreennttss==22 is the same as ----mmeerrggeess.  ----mmaaxx--ppaarreennttss==00
           gives all root commits and ----mmiinn--ppaarreennttss==33 all octopus merges.

           ----nnoo--mmiinn--ppaarreennttss and ----nnoo--mmaaxx--ppaarreennttss reset these limits (to no limit) again. Equivalent forms are
           ----mmiinn--ppaarreennttss==00 (any commit has 0 or more parents) and ----mmaaxx--ppaarreennttss==--11 (negative numbers denote no upper
           limit).

       --first-parent
           Follow only the first parent commit upon seeing a merge commit. This option can give a better overview
           when viewing the evolution of a particular topic branch, because merges into a topic branch tend to be
           only about adjusting to updated upstream from time to time, and this option allows you to ignore the
           individual commits brought in to your history by such a merge. Cannot be combined with --bisect.

       --not
           Reverses the meaning of the _^ prefix (or lack thereof) for all following revision specifiers, up to the
           next ----nnoott.

       --all
           Pretend as if all the refs in rreeffss//, along with HHEEAADD, are listed on the command line as _<_c_o_m_m_i_t_>.

       --branches[=<pattern>]
           Pretend as if all the refs in rreeffss//hheeaaddss are listed on the command line as _<_c_o_m_m_i_t_>. If _<_p_a_t_t_e_r_n_> is
           given, limit branches to ones matching given shell glob. If pattern lacks _?, _*, or _[, _/_* at the end is
           implied.

       --tags[=<pattern>]
           Pretend as if all the refs in rreeffss//ttaaggss are listed on the command line as _<_c_o_m_m_i_t_>. If _<_p_a_t_t_e_r_n_> is given,
           limit tags to ones matching given shell glob. If pattern lacks _?, _*, or _[, _/_* at the end is implied.

       --remotes[=<pattern>]
           Pretend as if all the refs in rreeffss//rreemmootteess are listed on the command line as _<_c_o_m_m_i_t_>. If _<_p_a_t_t_e_r_n_> is
           given, limit remote-tracking branches to ones matching given shell glob. If pattern lacks _?, _*, or _[, _/_*
           at the end is implied.

       --glob=<glob-pattern>
           Pretend as if all the refs matching shell glob _<_g_l_o_b_-_p_a_t_t_e_r_n_> are listed on the command line as _<_c_o_m_m_i_t_>.
           Leading _r_e_f_s_/, is automatically prepended if missing. If pattern lacks _?, _*, or _[, _/_* at the end is
           implied.

       --exclude=<glob-pattern>
           Do not include refs matching _<_g_l_o_b_-_p_a_t_t_e_r_n_> that the next ----aallll, ----bbrraanncchheess, ----ttaaggss, ----rreemmootteess, or ----gglloobb
           would otherwise consider. Repetitions of this option accumulate exclusion patterns up to the next ----aallll,
           ----bbrraanncchheess, ----ttaaggss, ----rreemmootteess, or ----gglloobb option (other options or arguments do not clear accumulated
           patterns).

           The patterns given should not begin with rreeffss//hheeaaddss, rreeffss//ttaaggss, or rreeffss//rreemmootteess when applied to
           ----bbrraanncchheess, ----ttaaggss, or ----rreemmootteess, respectively, and they must begin with rreeffss// when applied to ----gglloobb or
           ----aallll. If a trailing _/_* is intended, it must be given explicitly.

       --reflog
           Pretend as if all objects mentioned by reflogs are listed on the command line as <<ccoommmmiitt>>.

       --single-worktree
           By default, all working trees will be examined by the following options when there are more than one (see
           ggiitt--wwoorrkkttrreeee(1)): ----aallll, ----rreefflloogg and ----iinnddeexxeedd--oobbjjeeccttss. This option forces them to examine the current
           working tree only.

       --ignore-missing
           Upon seeing an invalid object name in the input, pretend as if the bad input was not given.

       --bisect
           Pretend as if the bad bisection ref rreeffss//bbiisseecctt//bbaadd was listed and as if it was followed by ----nnoott and the
           good bisection refs rreeffss//bbiisseecctt//ggoooodd--** on the command line. Cannot be combined with --first-parent.

       --stdin
           In addition to the _<_c_o_m_m_i_t_> listed on the command line, read them from the standard input. If a ----
           separator is seen, stop reading commits and start reading paths to limit the result.

       --cherry-mark
           Like ----cchheerrrryy--ppiicckk (see below) but mark equivalent commits with == rather than omitting them, and
           inequivalent ones with ++.

       --cherry-pick
           Omit any commit that introduces the same change as another commit on the “other side” when the set of
           commits are limited with symmetric difference.

           For example, if you have two branches, AA and BB, a usual way to list all commits on only one side of them
           is with ----lleefftt--rriigghhtt (see the example below in the description of the ----lleefftt--rriigghhtt option). However, it
           shows the commits that were cherry-picked from the other branch (for example, “3rd on b” may be
           cherry-picked from branch A). With this option, such pairs of commits are excluded from the output.

       --left-only, --right-only
           List only commits on the respective side of a symmetric difference, i.e. only those which would be marked
           << resp.  >> by ----lleefftt--rriigghhtt.

           For example, ----cchheerrrryy--ppiicckk ----rriigghhtt--oonnllyy AA......BB omits those commits from BB which are in AA or are
           patch-equivalent to a commit in AA. In other words, this lists the ++ commits from ggiitt cchheerrrryy AA BB. More
           precisely, ----cchheerrrryy--ppiicckk ----rriigghhtt--oonnllyy ----nnoo--mmeerrggeess gives the exact list.

       --cherry
           A synonym for ----rriigghhtt--oonnllyy ----cchheerrrryy--mmaarrkk ----nnoo--mmeerrggeess; useful to limit the output to the commits on our
           side and mark those that have been applied to the other side of a forked history with ggiitt lloogg ----cchheerrrryy
           uuppssttrreeaamm......mmyybbrraanncchh, similar to ggiitt cchheerrrryy uuppssttrreeaamm mmyybbrraanncchh.

       -g, --walk-reflogs
           Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones.
           When this option is used you cannot specify commits to exclude (that is, _^_c_o_m_m_i_t, _c_o_m_m_i_t_1_._._c_o_m_m_i_t_2, and
           _c_o_m_m_i_t_1_._._._c_o_m_m_i_t_2 notations cannot be used).

           With ----pprreettttyy format other than oonneelliinnee (for obvious reasons), this causes the output to have two extra
           lines of information taken from the reflog. The reflog designator in the output may be shown as rreeff@@{{NNtthh}}
           (where NNtthh is the reverse-chronological index in the reflog) or as rreeff@@{{ttiimmeessttaammpp}} (with the timestamp for
           that entry), depending on a few rules:

            1. If the starting point is specified as rreeff@@{{NNtthh}}, show the index format.

            2. If the starting point was specified as rreeff@@{{nnooww}}, show the timestamp format.

            3. If neither was used, but ----ddaattee was given on the command line, show the timestamp in the format
               requested by ----ddaattee.

            4. Otherwise, show the index format.

           Under ----pprreettttyy==oonneelliinnee, the commit message is prefixed with this information on the same line. This option
           cannot be combined with ----rreevveerrssee. See also ggiitt--rreefflloogg(1).

       --merge
           After a failed merge, show refs that touch files having a conflict and don’t exist on all heads to merge.

       --boundary
           Output excluded boundary commits. Boundary commits are prefixed with --.

   HHiissttoorryy SSiimmpplliiffiiccaattiioonn
       Sometimes you are only interested in parts of the history, for example the commits modifying a particular
       <path>. But there are two parts of _H_i_s_t_o_r_y _S_i_m_p_l_i_f_i_c_a_t_i_o_n, one part is selecting the commits and the other is
       how to do it, as there are various strategies to simplify the history.

       The following options select the commits to be shown:

       <paths>
           Commits modifying the given <paths> are selected.

       --simplify-by-decoration
           Commits that are referred by some branch or tag are selected.

       Note that extra commits can be shown to give a meaningful history.

       The following options affect the way the simplification is performed:

       Default mode
           Simplifies the history to the simplest history explaining the final state of the tree. Simplest because it
           prunes some side branches if the end result is the same (i.e. merging branches with the same content)

       --full-history
           Same as the default mode, but does not prune some history.

       --dense
           Only the selected commits are shown, plus some to have a meaningful history.

       --sparse
           All commits in the simplified history are shown.

       --simplify-merges
           Additional option to ----ffuullll--hhiissttoorryy to remove some needless merges from the resulting history, as there
           are no selected commits contributing to this merge.

       --ancestry-path
           When given a range of commits to display (e.g.  _c_o_m_m_i_t_1_._._c_o_m_m_i_t_2 or _c_o_m_m_i_t_2 _^_c_o_m_m_i_t_1), only display
           commits that exist directly on the ancestry chain between the _c_o_m_m_i_t_1 and _c_o_m_m_i_t_2, i.e. commits that are
           both descendants of _c_o_m_m_i_t_1, and ancestors of _c_o_m_m_i_t_2.

       A more detailed explanation follows.

       Suppose you specified ffoooo as the <paths>. We shall call commits that modify ffoooo !TREESAME, and the rest
       TREESAME. (In a diff filtered for ffoooo, they look different and equal, respectively.)

       In the following, we will always refer to the same example history to illustrate the differences between
       simplification settings. We assume that you are filtering for a file ffoooo in this commit graph:

                     .-A---M---N---O---P---Q
                    /     /   /   /   /   /
                   I     B   C   D   E   Y
                    \   /   /   /   /   /
                     `-------------'   X

       The horizontal line of history A---Q is taken to be the first parent of each merge. The commits are:

       ·   II is the initial commit, in which ffoooo exists with contents “asdf”, and a file qquuuuxx exists with contents
           “quux”. Initial commits are compared to an empty tree, so II is !TREESAME.

       ·   In AA, ffoooo contains just “foo”.

       ·   BB contains the same change as AA. Its merge MM is trivial and hence TREESAME to all parents.

       ·   CC does not change ffoooo, but its merge NN changes it to “foobar”, so it is not TREESAME to any parent.

       ·   DD sets ffoooo to “baz”. Its merge OO combines the strings from NN and DD to “foobarbaz”; i.e., it is not
           TREESAME to any parent.

       ·   EE changes qquuuuxx to “xyzzy”, and its merge PP combines the strings to “quux xyzzy”.  PP is TREESAME to OO, but
           not to EE.

       ·   XX is an independent root commit that added a new file ssiiddee, and YY modified it.  YY is TREESAME to XX. Its
           merge QQ added ssiiddee to PP, and QQ is TREESAME to PP, but not to YY.

       rreevv--lliisstt walks backwards through history, including or excluding commits based on whether ----ffuullll--hhiissttoorryy
       and/or parent rewriting (via ----ppaarreennttss or ----cchhiillddrreenn) are used. The following settings are available.

       Default mode
           Commits are included if they are not TREESAME to any parent (though this can be changed, see ----ssppaarrssee
           below). If the commit was a merge, and it was TREESAME to one parent, follow only that parent. (Even if
           there are several TREESAME parents, follow only one of them.) Otherwise, follow all parents.

           This results in:

                         .-A---N---O
                        /     /   /
                       I---------D

           Note how the rule to only follow the TREESAME parent, if one is available, removed BB from consideration
           entirely.  CC was considered via NN, but is TREESAME. Root commits are compared to an empty tree, so II is
           !TREESAME.

           Parent/child relations are only visible with ----ppaarreennttss, but that does not affect the commits selected in
           default mode, so we have shown the parent lines.

       --full-history without parent rewriting
           This mode differs from the default in one point: always follow all parents of a merge, even if it is
           TREESAME to one of them. Even if more than one side of the merge has commits that are included, this does
           not imply that the merge itself is! In the example, we get

                       I  A  B  N  D  O  P  Q

           MM was excluded because it is TREESAME to both parents.  EE, CC and BB were all walked, but only BB was
           !TREESAME, so the others do not appear.

           Note that without parent rewriting, it is not really possible to talk about the parent/child relationships
           between the commits, so we show them disconnected.

       --full-history with parent rewriting
           Ordinary commits are only included if they are !TREESAME (though this can be changed, see ----ssppaarrssee below).

           Merges are always included. However, their parent list is rewritten: Along each parent, prune away commits
           that are not included themselves. This results in

                         .-A---M---N---O---P---Q
                        /     /   /   /   /
                       I     B   /   D   /
                        \   /   /   /   /
                         `-------------'

           Compare to ----ffuullll--hhiissttoorryy without rewriting above. Note that EE was pruned away because it is TREESAME, but
           the parent list of P was rewritten to contain EE's parent II. The same happened for CC and NN, and XX, YY and QQ.

       In addition to the above settings, you can change whether TREESAME affects inclusion:

       --dense
           Commits that are walked are included if they are not TREESAME to any parent.

       --sparse
           All commits that are walked are included.

           Note that without ----ffuullll--hhiissttoorryy, this still simplifies merges: if one of the parents is TREESAME, we
           follow only that one, so the other sides of the merge are never walked.

       --simplify-merges
           First, build a history graph in the same way that ----ffuullll--hhiissttoorryy with parent rewriting does (see above).

           Then simplify each commit CC to its replacement CC'' in the final history according to the following rules:

           ·   Set CC'' to CC.

           ·   Replace each parent PP of CC'' with its simplification PP''. In the process, drop parents that are
               ancestors of other parents or that are root commits TREESAME to an empty tree, and remove duplicates,
               but take care to never drop all parents that we are TREESAME to.

           ·   If after this parent rewriting, CC'' is a root or merge commit (has zero or >1 parents), a boundary
               commit, or !TREESAME, it remains. Otherwise, it is replaced with its only parent.

           The effect of this is best shown by way of comparing to ----ffuullll--hhiissttoorryy with parent rewriting. The example
           turns into:

                         .-A---M---N---O
                        /     /       /
                       I     B       D
                        \   /       /
                         `---------'

           Note the major differences in NN, PP, and QQ over ----ffuullll--hhiissttoorryy:

           ·   NN's parent list had II removed, because it is an ancestor of the other parent MM. Still, NN remained
               because it is !TREESAME.

           ·   PP's parent list similarly had II removed.  PP was then removed completely, because it had one parent and
               is TREESAME.

           ·   QQ's parent list had YY simplified to XX.  XX was then removed, because it was a TREESAME root.  QQ was
               then removed completely, because it had one parent and is TREESAME.

       Finally, there is a fifth simplification mode available:

       --ancestry-path
           Limit the displayed commits to those directly on the ancestry chain between the “from” and “to” commits in
           the given commit range. I.e. only display commits that are ancestor of the “to” commit and descendants of
           the “from” commit.

           As an example use case, consider the following commit history:

                           D---E-------F
                          /     \       \
                         B---C---G---H---I---J
                        /                     \
                       A-------K---------------L--M

           A regular _D_._._M computes the set of commits that are ancestors of MM, but excludes the ones that are
           ancestors of DD. This is useful to see what happened to the history leading to MM since DD, in the sense that
           “what does MM have that did not exist in DD”. The result in this example would be all the commits, except AA
           and BB (and DD itself, of course).

           When we want to find out what commits in MM are contaminated with the bug introduced by DD and need fixing,
           however, we might want to view only the subset of _D_._._M that are actually descendants of DD, i.e. excluding
           CC and KK. This is exactly what the ----aanncceessttrryy--ppaatthh option does. Applied to the _D_._._M range, it results in:

                               E-------F
                                \       \
                                 G---H---I---J
                                              \
                                               L--M

       The ----ssiimmpplliiffyy--bbyy--ddeeccoorraattiioonn option allows you to view only the big picture of the topology of the history, by
       omitting commits that are not referenced by tags. Commits are marked as !TREESAME (in other words, kept after
       history simplification rules described above) if (1) they are referenced by tags, or (2) they change the
       contents of the paths given on the command line. All other commits are marked as TREESAME (subject to be
       simplified away).

   CCoommmmiitt OOrrddeerriinngg
       By default, the commits are shown in reverse chronological order.

       --date-order
           Show no parents before all of its children are shown, but otherwise show commits in the commit timestamp
           order.

       --author-date-order
           Show no parents before all of its children are shown, but otherwise show commits in the author timestamp
           order.

       --topo-order
           Show no parents before all of its children are shown, and avoid showing commits on multiple lines of
           history intermixed.

           For example, in a commit history like this:

                   ---1----2----4----7
                       \              \
                        3----5----6----8---

           where the numbers denote the order of commit timestamps, ggiitt rreevv--lliisstt and friends with ----ddaattee--oorrddeerr show
           the commits in the timestamp order: 8 7 6 5 4 3 2 1.

           With ----ttooppoo--oorrddeerr, they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5 3 1); some older commits are shown
           before newer ones in order to avoid showing the commits from two parallel development track mixed
           together.

       --reverse
           Output the commits chosen to be shown (see Commit Limiting section above) in reverse order. Cannot be
           combined with ----wwaallkk--rreeffllooggss.

   OObbjjeecctt TTrraavveerrssaall
       These options are mostly targeted for packing of Git repositories.

       --exclude-promisor-objects
           (For internal use only.) Prefilter object traversal at promisor boundary. This is used with partial clone.
           This is stronger than ----mmiissssiinngg==aallllooww--pprroommiissoorr because it limits the traversal, rather than just silencing
           errors about missing objects.

       --no-walk[=(sorted|unsorted)]
           Only show the given commits, but do not traverse their ancestors. This has no effect if a range is
           specified. If the argument uunnssoorrtteedd is given, the commits are shown in the order they were given on the
           command line. Otherwise (if ssoorrtteedd or no argument was given), the commits are shown in reverse
           chronological order by commit time. Cannot be combined with ----ggrraapphh.

       --do-walk
           Overrides a previous ----nnoo--wwaallkk.

   CCoommmmiitt FFoorrmmaattttiinngg
       --pretty[=<format>], --format=<format>
           Pretty-print the contents of the commit logs in a given format, where _<_f_o_r_m_a_t_> can be one of _o_n_e_l_i_n_e,
           _s_h_o_r_t, _m_e_d_i_u_m, _f_u_l_l, _f_u_l_l_e_r, _e_m_a_i_l, _r_a_w, _f_o_r_m_a_t_:_<_s_t_r_i_n_g_> and _t_f_o_r_m_a_t_:_<_s_t_r_i_n_g_>. When _<_f_o_r_m_a_t_> is none of
           the above, and has _%_p_l_a_c_e_h_o_l_d_e_r in it, it acts as if _-_-_p_r_e_t_t_y_=_t_f_o_r_m_a_t_:_<_f_o_r_m_a_t_> were given.

           See the "PRETTY FORMATS" section for some additional details for each format. When _=_<_f_o_r_m_a_t_> part is
           omitted, it defaults to _m_e_d_i_u_m.

           Note: you can specify the default pretty format in the repository configuration (see ggiitt--ccoonnffiigg(1)).

       --abbrev-commit
           Instead of showing the full 40-byte hexadecimal commit object name, show only a partial prefix. Non
           default number of digits can be specified with "--abbrev=<n>" (which also modifies diff output, if it is
           displayed).

           This should make "--pretty=oneline" a whole lot more readable for people using 80-column terminals.

       --no-abbrev-commit
           Show the full 40-byte hexadecimal commit object name. This negates ----aabbbbrreevv--ccoommmmiitt and those options which
           imply it such as "--oneline". It also overrides the lloogg..aabbbbrreevvCCoommmmiitt variable.

       --oneline
           This is a shorthand for "--pretty=oneline --abbrev-commit" used together.

       --encoding=<encoding>
           The commit objects record the encoding used for the log message in their encoding header; this option can
           be used to tell the command to re-code the commit log message in the encoding preferred by the user. For
           non plumbing commands this defaults to UTF-8. Note that if an object claims to be encoded in XX and we are
           outputting in XX, we will output the object verbatim; this means that invalid sequences in the original
           commit may be copied to the output.

       --expand-tabs=<n>, --expand-tabs, --no-expand-tabs
           Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is
           multiple of _<_n_>) in the log message before showing it in the output.  ----eexxppaanndd--ttaabbss is a short-hand for
           ----eexxppaanndd--ttaabbss==88, and ----nnoo--eexxppaanndd--ttaabbss is a short-hand for ----eexxppaanndd--ttaabbss==00, which disables tab expansion.

           By default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i.e.  _m_e_d_i_u_m,
           which is the default, _f_u_l_l, and _f_u_l_l_e_r).

       --notes[=<treeish>]
           Show the notes (see ggiitt--nnootteess(1)) that annotate the commit, when showing the commit log message. This is
           the default for ggiitt lloogg, ggiitt sshhooww and ggiitt wwhhaattcchhaannggeedd commands when there is no ----pprreettttyy, ----ffoorrmmaatt, or
           ----oonneelliinnee option given on the command line.

           By default, the notes shown are from the notes refs listed in the ccoorree..nnootteessRReeff and nnootteess..ddiissppllaayyRReeff
           variables (or corresponding environment overrides). See ggiitt--ccoonnffiigg(1) for more details.

           With an optional _<_t_r_e_e_i_s_h_> argument, use the treeish to find the notes to display. The treeish can specify
           the full refname when it begins with rreeffss//nnootteess//; when it begins with nnootteess//, rreeffss// and otherwise
           rreeffss//nnootteess// is prefixed to form a full name of the ref.

           Multiple --notes options can be combined to control which notes are being displayed. Examples:
           "--notes=foo" will show only notes from "refs/notes/foo"; "--notes=foo --notes" will show both notes from
           "refs/notes/foo" and from the default notes ref(s).

       --no-notes
           Do not show notes. This negates the above ----nnootteess option, by resetting the list of notes refs from which
           notes are shown. Options are parsed in the order given on the command line, so e.g. "--notes --notes=foo
           --no-notes --notes=bar" will only show notes from "refs/notes/bar".

       --show-notes[=<treeish>], --[no-]standard-notes
           These options are deprecated. Use the above --notes/--no-notes options instead.

       --show-signature
           Check the validity of a signed commit object by passing the signature to ggppgg ----vveerriiffyy and show the output.

       --relative-date
           Synonym for ----ddaattee==rreellaattiivvee.

       --date=<format>
           Only takes effect for dates shown in human-readable format, such as when using ----pprreettttyy.  lloogg..ddaattee config
           variable sets a default value for the log command’s ----ddaattee option. By default, dates are shown in the
           original time zone (either committer’s or author’s). If --llooccaall is appended to the format (e.g.,
           iissoo--llooccaall), the user’s local time zone is used instead.

           ----ddaattee==rreellaattiivvee shows dates relative to the current time, e.g. “2 hours ago”. The --llooccaall option has no
           effect for ----ddaattee==rreellaattiivvee.

           ----ddaattee==llooccaall is an alias for ----ddaattee==ddeeffaauulltt--llooccaall.

           ----ddaattee==iissoo (or ----ddaattee==iissoo88660011) shows timestamps in a ISO 8601-like format. The differences to the strict
           ISO 8601 format are:

           ·   a space instead of the TT date/time delimiter

           ·   a space between time and time zone

           ·   no colon between hours and minutes of the time zone

           ----ddaattee==iissoo--ssttrriicctt (or ----ddaattee==iissoo88660011--ssttrriicctt) shows timestamps in strict ISO 8601 format.

           ----ddaattee==rrffcc (or ----ddaattee==rrffcc22882222) shows timestamps in RFC 2822 format, often found in email messages.

           ----ddaattee==sshhoorrtt shows only the date, but not the time, in YYYYYYYY--MMMM--DDDD format.

           ----ddaattee==rraaww shows the date as seconds since the epoch (1970-01-01 00:00:00 UTC), followed by a space, and
           then the timezone as an offset from UTC (a ++ or -- with four digits; the first two are hours, and the
           second two are minutes). I.e., as if the timestamp were formatted with ssttrrffttiimmee((""%%ss %%zz""))). Note that the
           --llooccaall option does not affect the seconds-since-epoch value (which is always measured in UTC), but does
           switch the accompanying timezone value.

           ----ddaattee==uunniixx shows the date as a Unix epoch timestamp (seconds since 1970). As with ----rraaww, this is always
           in UTC and therefore --llooccaall has no effect.

           ----ddaattee==ffoorrmmaatt::......  feeds the format ......  to your system ssttrrffttiimmee, except for %z and %Z, which are handled
           internally. Use ----ddaattee==ffoorrmmaatt::%%cc to show the date in your system locale’s preferred format. See the
           ssttrrffttiimmee manual for a complete list of format placeholders. When using --llooccaall, the correct syntax is
           ----ddaattee==ffoorrmmaatt--llooccaall::.......

           ----ddaattee==ddeeffaauulltt is the default format, and is similar to ----ddaattee==rrffcc22882222, with a few exceptions:

           ·   there is no comma after the day-of-week

           ·   the time zone is omitted when the local time zone is used

       --parents
           Print also the parents of the commit (in the form "commit parent..."). Also enables parent rewriting, see
           _H_i_s_t_o_r_y _S_i_m_p_l_i_f_i_c_a_t_i_o_n above.

       --children
           Print also the children of the commit (in the form "commit child..."). Also enables parent rewriting, see
           _H_i_s_t_o_r_y _S_i_m_p_l_i_f_i_c_a_t_i_o_n above.

       --left-right
           Mark which side of a symmetric difference a commit is reachable from. Commits from the left side are
           prefixed with << and those from the right with >>. If combined with ----bboouunnddaarryy, those commits are prefixed
           with --.

           For example, if you have this topology:

                            y---b---b  branch B
                           / \ /
                          /   .
                         /   / \
                        o---x---a---a  branch A

           you would get an output like this:

                       $ git rev-list --left-right --boundary --pretty=oneline A...B

                       >bbbbbbb... 3rd on b
                       >bbbbbbb... 2nd on b
                       <aaaaaaa... 3rd on a
                       <aaaaaaa... 2nd on a
                       -yyyyyyy... 1st on b
                       -xxxxxxx... 1st on a

       --graph
           Draw a text-based graphical representation of the commit history on the left hand side of the output. This
           may cause extra lines to be printed in between commits, in order for the graph history to be drawn
           properly. Cannot be combined with ----nnoo--wwaallkk.

           This enables parent rewriting, see _H_i_s_t_o_r_y _S_i_m_p_l_i_f_i_c_a_t_i_o_n above.

           This implies the ----ttooppoo--oorrddeerr option by default, but the ----ddaattee--oorrddeerr option may also be specified.

       --show-linear-break[=<barrier>]
           When --graph is not used, all history branches are flattened which can make it hard to see that the two
           consecutive commits do not belong to a linear branch. This option puts a barrier in between them in that
           case. If <<bbaarrrriieerr>> is specified, it is the string that will be shown instead of the default one.

   DDiiffff FFoorrmmaattttiinngg
       Listed below are options that control the formatting of diff output. Some of them are specific to ggiitt--rreevv--
       lliisstt(1), however other diff options may be given. See ggiitt--ddiiffff--ffiilleess(1) for more options.

       -c
           With this option, diff output for a merge commit shows the differences from each of the parents to the
           merge result simultaneously instead of showing pairwise diff between a parent and the result one at a
           time. Furthermore, it lists only files which were modified from all parents.

       --cc
           This flag implies the --cc option and further compresses the patch output by omitting uninteresting hunks
           whose contents in the parents have only two variants and the merge result picks one of them without
           modification.

       -m
           This flag makes the merge commits show the full diff like regular commits; for each merge parent, a
           separate log entry and diff is generated. An exception is that only diff against the first parent is shown
           when ----ffiirrsstt--ppaarreenntt option is given; in that case, the output represents the changes the merge brought
           _i_n_t_o the then-current branch.

       -r
           Show recursive diffs.

       -t
           Show the tree objects in the diff output. This implies --rr.

PPRREETTTTYY FFOORRMMAATTSS
       If the commit is a merge, and if the pretty-format is not _o_n_e_l_i_n_e, _e_m_a_i_l or _r_a_w, an additional line is
       inserted before the _A_u_t_h_o_r_: line. This line begins with "Merge: " and the sha1s of ancestral commits are
       printed, separated by spaces. Note that the listed commits may not necessarily be the list of the ddiirreecctt
       parent commits if you have limited your view of history: for example, if you are only interested in changes
       related to a certain directory or file.

       There are several built-in formats, and you can define additional formats by setting a pretty.<name> config
       option to either another format name, or a _f_o_r_m_a_t_: string, as described below (see ggiitt--ccoonnffiigg(1)). Here are
       the details of the built-in formats:

       ·   _o_n_e_l_i_n_e

               <sha1> <title line>

           This is designed to be as compact as possible.

       ·   _s_h_o_r_t

               commit <sha1>
               Author: <author>

               <title line>

       ·   _m_e_d_i_u_m

               commit <sha1>
               Author: <author>
               Date:   <author date>

               <title line>

               <full commit message>

       ·   _f_u_l_l

               commit <sha1>
               Author: <author>
               Commit: <committer>

               <title line>

               <full commit message>

       ·   _f_u_l_l_e_r

               commit <sha1>
               Author:     <author>
               AuthorDate: <author date>
               Commit:     <committer>
               CommitDate: <committer date>

               <title line>

               <full commit message>

       ·   _e_m_a_i_l

               From <sha1> <date>
               From: <author>
               Date: <author date>
               Subject: [PATCH] <title line>

               <full commit message>

       ·   _r_a_w

           The _r_a_w format shows the entire commit exactly as stored in the commit object. Notably, the SHA-1s are
           displayed in full, regardless of whether --abbrev or --no-abbrev are used, and _p_a_r_e_n_t_s information show
           the true parent commits, without taking grafts or history simplification into account. Note that this
           format affects the way commits are displayed, but not the way the diff is shown e.g. with ggiitt lloogg ----rraaww.
           To get full object names in a raw diff format, use ----nnoo--aabbbbrreevv.

       ·   _f_o_r_m_a_t_:_<_s_t_r_i_n_g_>

           The _f_o_r_m_a_t_:_<_s_t_r_i_n_g_> format allows you to specify which information you want to show. It works a little bit
           like printf format, with the notable exception that you get a newline with _%_n instead of _\_n.

           E.g, _f_o_r_m_a_t_:_"_T_h_e _a_u_t_h_o_r _o_f _%_h _w_a_s _%_a_n_, _%_a_r_%_n_T_h_e _t_i_t_l_e _w_a_s _>_>_%_s_<_<_%_n_" would show something like this:

               The author of fe6e0ee was Junio C Hamano, 23 hours ago
               The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<

           The placeholders are:

           ·   _%_H: commit hash

           ·   _%_h: abbreviated commit hash

           ·   _%_T: tree hash

           ·   _%_t: abbreviated tree hash

           ·   _%_P: parent hashes

           ·   _%_p: abbreviated parent hashes

           ·   _%_a_n: author name

           ·   _%_a_N: author name (respecting .mailmap, see ggiitt--sshhoorrttlloogg(1) or ggiitt--bbllaammee(1))

           ·   _%_a_e: author email

           ·   _%_a_E: author email (respecting .mailmap, see ggiitt--sshhoorrttlloogg(1) or ggiitt--bbllaammee(1))

           ·   _%_a_d: author date (format respects --date= option)

           ·   _%_a_D: author date, RFC2822 style

           ·   _%_a_r: author date, relative

           ·   _%_a_t: author date, UNIX timestamp

           ·   _%_a_i: author date, ISO 8601-like format

           ·   _%_a_I: author date, strict ISO 8601 format

           ·   _%_c_n: committer name

           ·   _%_c_N: committer name (respecting .mailmap, see ggiitt--sshhoorrttlloogg(1) or ggiitt--bbllaammee(1))

           ·   _%_c_e: committer email

           ·   _%_c_E: committer email (respecting .mailmap, see ggiitt--sshhoorrttlloogg(1) or ggiitt--bbllaammee(1))

           ·   _%_c_d: committer date (format respects --date= option)

           ·   _%_c_D: committer date, RFC2822 style

           ·   _%_c_r: committer date, relative

           ·   _%_c_t: committer date, UNIX timestamp

           ·   _%_c_i: committer date, ISO 8601-like format

           ·   _%_c_I: committer date, strict ISO 8601 format

           ·   _%_d: ref names, like the --decorate option of ggiitt--lloogg(1)

           ·   _%_D: ref names without the " (", ")" wrapping.

           ·   _%_e: encoding

           ·   _%_s: subject

           ·   _%_f: sanitized subject line, suitable for a filename

           ·   _%_b: body

           ·   _%_B: raw body (unwrapped subject and body)

           ·   _%_N: commit notes

           ·   _%_G_G: raw verification message from GPG for a signed commit

           ·   _%_G_?: show "G" for a good (valid) signature, "B" for a bad signature, "U" for a good signature with
               unknown validity, "X" for a good signature that has expired, "Y" for a good signature made by an
               expired key, "R" for a good signature made by a revoked key, "E" if the signature cannot be checked
               (e.g. missing key) and "N" for no signature

           ·   _%_G_S: show the name of the signer for a signed commit

           ·   _%_G_K: show the key used to sign a signed commit

           ·   _%_g_D: reflog selector, e.g., rreeffss//ssttaasshh@@{{11}} or rreeffss//ssttaasshh@@{{22 mmiinnuutteess aaggoo}; the format follows the rules
               described for the --gg option. The portion before the @@ is the refname as given on the command line (so
               ggiitt lloogg --gg rreeffss//hheeaaddss//mmaasstteerr would yield rreeffss//hheeaaddss//mmaasstteerr@@{{00}}).

           ·   _%_g_d: shortened reflog selector; same as %%ggDD, but the refname portion is shortened for human
               readability (so rreeffss//hheeaaddss//mmaasstteerr becomes just mmaasstteerr).

           ·   _%_g_n: reflog identity name

           ·   _%_g_N: reflog identity name (respecting .mailmap, see ggiitt--sshhoorrttlloogg(1) or ggiitt--bbllaammee(1))

           ·   _%_g_e: reflog identity email

           ·   _%_g_E: reflog identity email (respecting .mailmap, see ggiitt--sshhoorrttlloogg(1) or ggiitt--bbllaammee(1))

           ·   _%_g_s: reflog subject

           ·   _%_C_r_e_d: switch color to red

           ·   _%_C_g_r_e_e_n: switch color to green

           ·   _%_C_b_l_u_e: switch color to blue

           ·   _%_C_r_e_s_e_t: reset color

           ·   _%_C_(_._._._): color specification, as described under Values in the "CONFIGURATION FILE" section of ggiitt--
               ccoonnffiigg(1). By default, colors are shown only when enabled for log output (by ccoolloorr..ddiiffff, ccoolloorr..uuii, or
               ----ccoolloorr, and respecting the aauuttoo settings of the former if we are going to a terminal).  %%CC((aauuttoo,,......))
               is accepted as a historical synonym for the default (e.g., %%CC((aauuttoo,,rreedd))). Specifying %%CC((aallwwaayyss,,......))
               wwiillll sshhooww tthhee ccoolloorrss eevveenn wwhheenn ccoolloorr iiss nnoott ootthheerrwwiissee eennaabblleedd ((tthhoouugghh ccoonnssiiddeerr jjuusstt uussiinngg
               ``----ccoolloorr==aallwwaayyss to enable color for the whole output, including this format and anything else git
               might color).  aauuttoo alone (i.e.  %%CC((aauuttoo))) will turn on auto coloring on the next placeholders until
               the color is switched again.

           ·   _%_m: left (<<), right (>>) or boundary (--) mark

           ·   _%_n: newline

           ·   _%_%: a raw _%

           ·   _%_x_0_0: print a byte from a hex code

           ·   _%_w_(_[_<_w_>_[_,_<_i_1_>_[_,_<_i_2_>_]_]_]_): switch line wrapping, like the -w option of ggiitt--sshhoorrttlloogg(1).

           ·   _%_<_(_<_N_>_[_,_t_r_u_n_c_|_l_t_r_u_n_c_|_m_t_r_u_n_c_]_): make the next placeholder take at least N columns, padding spaces on
               the right if necessary. Optionally truncate at the beginning (ltrunc), the middle (mtrunc) or the end
               (trunc) if the output is longer than N columns. Note that truncating only works correctly with N >= 2.

           ·   _%_<_|_(_<_N_>_): make the next placeholder take at least until Nth columns, padding spaces on the right if
               necessary

           ·   _%_>_(_<_N_>_), _%_>_|_(_<_N_>_): similar to _%_<_(_<_N_>_), _%_<_|_(_<_N_>_) respectively, but padding spaces on the left

           ·   _%_>_>_(_<_N_>_), _%_>_>_|_(_<_N_>_): similar to _%_>_(_<_N_>_), _%_>_|_(_<_N_>_) respectively, except that if the next placeholder
               takes more spaces than given and there are spaces on its left, use those spaces

           ·   _%_>_<_(_<_N_>_), _%_>_<_|_(_<_N_>_): similar to _%_<_(_<_N_>_), _%_<_|_(_<_N_>_) respectively, but padding both sides (i.e. the text
               is centered)

           ·   %(trailers[:options]): display the trailers of the body as interpreted by ggiitt--iinntteerrpprreett--ttrraaiilleerrss(1).
               The ttrraaiilleerrss string may be followed by a colon and zero or more comma-separated options. If the oonnllyy
               option is given, omit non-trailer lines from the trailer block. If the uunnffoolldd option is given, behave
               as if interpret-trailer’s ----uunnffoolldd option was given. E.g., %%((ttrraaiilleerrss::oonnllyy,,uunnffoolldd)) to do both.

           NNoottee
           Some placeholders may depend on other options given to the revision traversal engine. For example, the %%gg**
           reflog options will insert an empty string unless we are traversing reflog entries (e.g., by ggiitt lloogg --gg).
           The %%dd and %%DD placeholders will use the "short" decoration format if ----ddeeccoorraattee was not already provided
           on the command line.

       If you add a ++ (plus sign) after _% of a placeholder, a line-feed is inserted immediately before the expansion
       if and only if the placeholder expands to a non-empty string.

       If you add a -- (minus sign) after _% of a placeholder, all consecutive line-feeds immediately preceding the
       expansion are deleted if and only if the placeholder expands to an empty string.

       If you add a ` ` (space) after _% of a placeholder, a space is inserted immediately before the expansion if and
       only if the placeholder expands to a non-empty string.

       ·   _t_f_o_r_m_a_t_:

           The _t_f_o_r_m_a_t_: format works exactly like _f_o_r_m_a_t_:, except that it provides "terminator" semantics instead of
           "separator" semantics. In other words, each commit has the message terminator character (usually a
           newline) appended, rather than a separator placed between entries. This means that the final entry of a
           single-line format will be properly terminated with a new line, just as the "oneline" format does. For
           example:

               $ git log -2 --pretty=format:%h 4da45bef \
                 | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
               4da45be
               7134973 -- NO NEWLINE

               $ git log -2 --pretty=tformat:%h 4da45bef \
                 | perl -pe '$_ .= " -- NO NEWLINE\n" unless /\n/'
               4da45be
               7134973

           In addition, any unrecognized string that has a %% in it is interpreted as if it has ttffoorrmmaatt:: in front of
           it. For example, these two are equivalent:

               $ git log -2 --pretty=tformat:%h 4da45bef
               $ git log -2 --pretty=%h 4da45bef

CCOOMMMMOONN DDIIFFFF OOPPTTIIOONNSS
       -p, -u, --patch
           Generate patch (see section on generating patches).

       -s, --no-patch
           Suppress diff output. Useful for commands like ggiitt sshhooww that show the patch by default, or to cancel the
           effect of ----ppaattcchh.

       -U<n>, --unified=<n>
           Generate diffs with <n> lines of context instead of the usual three. Implies --pp.

       --raw
           For each commit, show a summary of changes using the raw diff format. See the "RAW OUTPUT FORMAT" section
           of ggiitt--ddiiffff(1). This is different from showing the log itself in raw format, which you can achieve with
           ----ffoorrmmaatt==rraaww.

       --patch-with-raw
           Synonym for --pp ----rraaww.

       --indent-heuristic
           Enable the heuristic that shift diff hunk boundaries to make patches easier to read. This is the default.

       --no-indent-heuristic
           Disable the indent heuristic.

       --minimal
           Spend extra time to make sure the smallest possible diff is produced.

       --patience
           Generate a diff using the "patience diff" algorithm.

       --histogram
           Generate a diff using the "histogram diff" algorithm.

       --anchored=<text>
           Generate a diff using the "anchored diff" algorithm.

           This option may be specified more than once.

           If a line exists in both the source and destination, exists only once, and starts with this text, this
           algorithm attempts to prevent it from appearing as a deletion or addition in the output. It uses the
           "patience diff" algorithm internally.

       --diff-algorithm={patience|minimal|histogram|myers}
           Choose a diff algorithm. The variants are as follows:

           ddeeffaauulltt, mmyyeerrss
               The basic greedy diff algorithm. Currently, this is the default.

           mmiinniimmaall
               Spend extra time to make sure the smallest possible diff is produced.

           ppaattiieennccee
               Use "patience diff" algorithm when generating patches.

           hhiissttooggrraamm
               This algorithm extends the patience algorithm to "support low-occurrence common elements".

           For instance, if you configured diff.algorithm variable to a non-default value and want to use the default
           one, then you have to use ----ddiiffff--aallggoorriitthhmm==ddeeffaauulltt option.

       --stat[=<width>[,<name-width>[,<count>]]]
           Generate a diffstat. By default, as much space as necessary will be used for the filename part, and the
           rest for the graph part. Maximum width defaults to terminal width, or 80 columns if not connected to a
           terminal, and can be overridden by <<wwiiddtthh>>. The width of the filename part can be limited by giving
           another width <<nnaammee--wwiiddtthh>> after a comma. The width of the graph part can be limited by using
           ----ssttaatt--ggrraapphh--wwiiddtthh==<<wwiiddtthh>> (affects all commands generating a stat graph) or by setting
           ddiiffff..ssttaattGGrraapphhWWiiddtthh==<<wwiiddtthh>> (does not affect ggiitt ffoorrmmaatt--ppaattcchh). By giving a third parameter <<ccoouunntt>>, you
           can limit the output to the first <<ccoouunntt>> lines, followed by ......  if there are more.

           These parameters can also be set individually with ----ssttaatt--wwiiddtthh==<<wwiiddtthh>>, ----ssttaatt--nnaammee--wwiiddtthh==<<nnaammee--wwiiddtthh>>
           and ----ssttaatt--ccoouunntt==<<ccoouunntt>>.

       --compact-summary
           Output a condensed summary of extended header information such as file creations or deletions ("new" or
           "gone", optionally "+l" if it’s a symlink) and mode changes ("+x" or "-x" for adding or removing
           executable bit respectively) in diffstat. The information is put betwen the filename part and the graph
           part. Implies ----ssttaatt.

       --numstat
           Similar to ----ssttaatt, but shows number of added and deleted lines in decimal notation and pathname without
           abbreviation, to make it more machine friendly. For binary files, outputs two -- instead of saying 00 00.

       --shortstat
           Output only the last line of the ----ssttaatt format containing total number of modified files, as well as
           number of added and deleted lines.

       --dirstat[=<param1,param2,...>]
           Output the distribution of relative amount of changes for each sub-directory. The behavior of ----ddiirrssttaatt
           can be customized by passing it a comma separated list of parameters. The defaults are controlled by the
           ddiiffff..ddiirrssttaatt configuration variable (see ggiitt--ccoonnffiigg(1)). The following parameters are available:

           cchhaannggeess
               Compute the dirstat numbers by counting the lines that have been removed from the source, or added to
               the destination. This ignores the amount of pure code movements within a file. In other words,
               rearranging lines in a file is not counted as much as other changes. This is the default behavior when
               no parameter is given.

           lliinneess
               Compute the dirstat numbers by doing the regular line-based diff analysis, and summing the
               removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no
               natural concept of lines). This is a more expensive ----ddiirrssttaatt behavior than the cchhaannggeess behavior, but
               it does count rearranged lines within a file as much as other changes. The resulting output is
               consistent with what you get from the other ----**ssttaatt options.

           ffiilleess
               Compute the dirstat numbers by counting the number of files changed. Each changed file counts equally
               in the dirstat analysis. This is the computationally cheapest ----ddiirrssttaatt behavior, since it does not
               have to look at the file contents at all.

           ccuummuullaattiivvee
               Count changes in a child directory for the parent directory as well. Note that when using ccuummuullaattiivvee,
               the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be
               specified with the nnoonnccuummuullaattiivvee parameter.

           <limit>
               An integer parameter specifies a cut-off percent (3% by default). Directories contributing less than
               this percentage of the changes are not shown in the output.

           Example: The following will count changed files, while ignoring directories with less than 10% of the
           total amount of changed files, and accumulating child directory counts in the parent directories:
           ----ddiirrssttaatt==ffiilleess,,1100,,ccuummuullaattiivvee.

       --summary
           Output a condensed summary of extended header information such as creations, renames and mode changes.

       --patch-with-stat
           Synonym for --pp ----ssttaatt.

       -z
           Separate the commits with NULs instead of with new newlines.

           Also, when ----rraaww or ----nnuummssttaatt has been given, do not munge pathnames and use NULs as output field
           terminators.

           Without this option, pathnames with "unusual" characters are quoted as explained for the configuration
           variable ccoorree..qquuootteePPaatthh (see ggiitt--ccoonnffiigg(1)).

       --name-only
           Show only names of changed files.

       --name-status
           Show only names and status of changed files. See the description of the ----ddiiffff--ffiilltteerr option on what the
           status letters mean.

       --submodule[=<format>]
           Specify how differences in submodules are shown. When specifying ----ssuubbmmoodduullee==sshhoorrtt the _s_h_o_r_t format is
           used. This format just shows the names of the commits at the beginning and end of the range. When
           ----ssuubbmmoodduullee or ----ssuubbmmoodduullee==lloogg is specified, the _l_o_g format is used. This format lists the commits in the
           range like ggiitt--ssuubbmmoodduullee(1) ssuummmmaarryy does. When ----ssuubbmmoodduullee==ddiiffff is specified, the _d_i_f_f format is used.
           This format shows an inline diff of the changes in the submodule contents between the commit range.
           Defaults to ddiiffff..ssuubbmmoodduullee or the _s_h_o_r_t format if the config option is unset.

       --color[=<when>]
           Show colored diff.  ----ccoolloorr (i.e. without _=_<_w_h_e_n_>) is the same as ----ccoolloorr==aallwwaayyss.  _<_w_h_e_n_> can be one of
           aallwwaayyss, nneevveerr, or aauuttoo.

       --no-color
           Turn off colored diff. It is the same as ----ccoolloorr==nneevveerr.

       --color-moved[=<mode>]
           Moved lines of code are colored differently. The <mode> defaults to _n_o if the option is not given and to
           _z_e_b_r_a if the option with no mode is given. The mode must be one of:

           no
               Moved lines are not highlighted.

           default
               Is a synonym for zzeebbrraa. This may change to a more sensible mode in the future.

           plain
               Any line that is added in one location and was removed in another location will be colored with
               _c_o_l_o_r_._d_i_f_f_._n_e_w_M_o_v_e_d. Similarly _c_o_l_o_r_._d_i_f_f_._o_l_d_M_o_v_e_d will be used for removed lines that are added
               somewhere else in the diff. This mode picks up any moved line, but it is not very useful in a review
               to determine if a block of code was moved without permutation.

           zebra
               Blocks of moved text of at least 20 alphanumeric characters are detected greedily. The detected blocks
               are painted using either the _c_o_l_o_r_._d_i_f_f_._{_o_l_d_,_n_e_w_}_M_o_v_e_d color or _c_o_l_o_r_._d_i_f_f_._{_o_l_d_,_n_e_w_}_M_o_v_e_d_A_l_t_e_r_n_a_t_i_v_e.
               The change between the two colors indicates that a new block was detected.

           dimmed_zebra
               Similar to _z_e_b_r_a, but additional dimming of uninteresting parts of moved code is performed. The
               bordering lines of two adjacent blocks are considered interesting, the rest is uninteresting.

       --word-diff[=<mode>]
           Show a word diff, using the <mode> to delimit changed words. By default, words are delimited by
           whitespace; see ----wwoorrdd--ddiiffff--rreeggeexx below. The <mode> defaults to _p_l_a_i_n, and must be one of:

           color
               Highlight changed words using only colors. Implies ----ccoolloorr.

           plain
               Show words as [[--rreemmoovveedd--]] and {{++aaddddeedd++}}. Makes no attempts to escape the delimiters if they appear in
               the input, so the output may be ambiguous.

           porcelain
               Use a special line-based format intended for script consumption. Added/removed/unchanged runs are
               printed in the usual unified diff format, starting with a ++/--/` ` character at the beginning of the
               line and extending to the end of the line. Newlines in the input are represented by a tilde ~~ on a
               line of its own.

           none
               Disable word diff again.

           Note that despite the name of the first mode, color is used to highlight the changed parts in all modes if
           enabled.

       --word-diff-regex=<regex>
           Use <regex> to decide what a word is, instead of considering runs of non-whitespace to be a word. Also
           implies ----wwoorrdd--ddiiffff unless it was already enabled.

           Every non-overlapping match of the <regex> is considered a word. Anything between these matches is
           considered whitespace and ignored(!) for the purposes of finding differences. You may want to append
           ||[[^^[[::ssppaaccee::]]]] to your regular expression to make sure that it matches all non-whitespace characters. A
           match that contains a newline is silently truncated(!) at the newline.

           For example, ----wwoorrdd--ddiiffff--rreeggeexx==..  will treat each character as a word and, correspondingly, show
           differences character by character.

           The regex can also be set via a diff driver or configuration option, see ggiittaattttrriibbuutteess(5) or ggiitt--
           ccoonnffiigg(1). Giving it explicitly overrides any diff driver or configuration setting. Diff drivers override
           configuration settings.

       --color-words[=<regex>]
           Equivalent to ----wwoorrdd--ddiiffff==ccoolloorr plus (if a regex was specified) ----wwoorrdd--ddiiffff--rreeggeexx==<<rreeggeexx>>.

       --no-renames
           Turn off rename detection, even when the configuration file gives the default to do so.

       --check
           Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is
           controlled by ccoorree..wwhhiitteessppaaccee configuration. By default, trailing whitespaces (including lines that solely
           consist of whitespaces) and a space character that is immediately followed by a tab character inside the
           initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are
           found. Not compatible with --exit-code.

       --ws-error-highlight=<kind>
           Highlight whitespace errors in the ccoonntteexxtt, oolldd or nneeww lines of the diff. Multiple values are separated by
           comma, nnoonnee resets previous values, ddeeffaauulltt reset the list to nneeww and aallll is a shorthand for
           oolldd,,nneeww,,ccoonntteexxtt. When this option is not given, and the configuration variable ddiiffff..wwssEErrrroorrHHiigghhlliigghhtt is
           not set, only whitespace errors in nneeww lines are highlighted. The whitespace errors are colored whith
           ccoolloorr..ddiiffff..wwhhiitteessppaaccee.

       --full-index
   